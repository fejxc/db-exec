version: '3.8'

services:
  sql-api:
    build:
      context: .
      dockerfile: Dockerfile-offline
    container_name: sql-execution-api
    ports:
      - "3001:3001"
    environment:
      - PYTHONUNBUFFERED=1
      - CORS_MODE=${CORS_MODE:-development}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sql-network

  # MySQL示例服务（使用国内镜像）
  mysql:
    image: registry.cn-hangzhou.aliyuncs.com/google_containers/mysql:8.0
    container_name: sql-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - sql-network

  # PostgreSQL示例服务（使用国内镜像）
  postgres:
    image: registry.cn-hangzhou.aliyuncs.com/google_containers/postgres:15
    container_name: sql-postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - sql-network

volumes:
  mysql_data:
  postgres_data:

networks:
  sql-network:
    driver: bridge